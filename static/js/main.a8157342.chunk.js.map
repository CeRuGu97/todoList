{"version":3,"sources":["TodoContext/index.js","TodoContext/useLocalSrorage.js","TodoCounter/index.js","TodoSearch/index.js","TodoList/index.js","TodoItem/index.js","CreateTodoButton/index.js","Modal/index.js","TodoForm/index.js","App/AppUI.js","App/index.js","index.js"],"names":["TodoContext","createContext","TodoProvider","children","itemName","initialValue","useState","error","setError","loading","setLoading","item","setItem","useEffect","setTimeout","parsedItem","localStorageItem","localStorage","getItem","JSON","parse","stringify","saveItem","newItem","stringifiedItem","useLocalStorage","todos","saveTodos","searchValue","setSearchValue","openModal","setOpenModal","completedtTodos","filter","todo","completed","length","totalTodos","searchedTodos","todoText","text","toLowerCase","seachText","includes","Provider","value","addTodo","newTodos","push","completeTodo","todoIndex","findIndex","deleteTodo","splice","TodoCounter","useContext","TodoSearch","Fragment","placeholder","onChange","event","target","TodoList","TodoItem","onComplete","onDelete","className","onClick","CreateTodoButton","prevState","Modal","ReactDOM","createPortal","document","getElementById","TodoForm","newTodoValue","setNewTodoValue","onSubmit","preventDefault","type","AppUI","map","index","App","render","StrictMode"],"mappings":"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","file":"static/js/main.a8157342.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react'\r\nimport { useLocalStorage } from './useLocalSrorage';\r\n\r\nconst TodoContext = createContext();\r\n\r\nconst TodoProvider = ({ children }) => {\r\n\r\n    const {\r\n        item: todos,\r\n        saveItem: saveTodos,\r\n        loading,\r\n        error\r\n    } = useLocalStorage('TODOS_V1', []);\r\n    const [searchValue, setSearchValue] = useState('');\r\n    const [openModal, setOpenModal] = useState(false);\r\n\r\n    //titulo de cuantos hemos completado\r\n    const completedtTodos = todos.filter(todo => !!todo.completed).length;\r\n    const totalTodos = todos.length;\r\n\r\n    //para ocupar el buscador y filtrar \r\n    let searchedTodos = [];\r\n    if (!searchValue.length >= 1) {\r\n        searchedTodos = todos;\r\n    } else {\r\n        searchedTodos = todos.filter((todo) => {\r\n            const todoText = todo.text.toLowerCase();\r\n            const seachText = searchValue.toLowerCase();\r\n            return todoText.includes(seachText);\r\n        })\r\n    }\r\n\r\n    const addTodo = (text) => {\r\n        const newTodos = [...todos];\r\n        newTodos.push({\r\n            completed: false,\r\n            text,\r\n        });\r\n        saveTodos(newTodos);\r\n    };\r\n\r\n    //para marcar como completados\r\n    const completeTodo = (text) => {\r\n        const todoIndex = todos.findIndex(todo => todo.text === text);\r\n        const newTodos = [...todos];\r\n        newTodos[todoIndex].completed = true;\r\n        saveTodos(newTodos);\r\n    };\r\n\r\n    //para elimitar un TODO\r\n    const deleteTodo = (text) => {\r\n        const todoIndex = todos.findIndex(todo => todo.text === text);\r\n        const newTodos = [...todos];\r\n        newTodos.splice(todoIndex, 1);\r\n        saveTodos(newTodos);\r\n    };\r\n\r\n\r\n    return (\r\n        <TodoContext.Provider value={{\r\n            loading,\r\n            error,\r\n            totalTodos,\r\n            completedtTodos,\r\n            searchValue,\r\n            setSearchValue,\r\n            searchedTodos,\r\n            addTodo,\r\n            completeTodo,\r\n            deleteTodo,\r\n            openModal,\r\n            setOpenModal,\r\n        }}>\r\n            {children}\r\n        </TodoContext.Provider>\r\n    )\r\n}\r\n\r\nexport { TodoContext, TodoProvider };","import { useState, useEffect } from \"react\";\r\n\r\nfunction useLocalStorage(itemName, initialValue) {\r\n    const [error, setError] = useState(false)\r\n    const [loading, setLoading] = useState(true)\r\n    const [item, setItem] = useState(initialValue);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            try {\r\n                const localStorageItem = localStorage.getItem(itemName);\r\n                let parsedItem;\r\n\r\n                if (!localStorageItem) {\r\n                    localStorage.setItem(itemName, JSON.stringify(initialValue));\r\n                    parsedItem = initialValue;\r\n                } else {\r\n                    parsedItem = JSON.parse(localStorageItem);\r\n                }\r\n                setItem(parsedItem);\r\n                setLoading(false);\r\n            } catch (error) {\r\n                setError(error)\r\n            }\r\n        }, 1000)\r\n    });\r\n\r\n\r\n    //puente lo que es es guardar el nuevo array de los TODOS que quedan\r\n    const saveItem = (newItem) => {\r\n        try {\r\n            const stringifiedItem = JSON.stringify(newItem);\r\n            localStorage.setItem(itemName, stringifiedItem);\r\n            setItem(newItem);\r\n        } catch (error) {\r\n            setError(error);\r\n        }\r\n    };\r\n\r\n    return {\r\n        item,\r\n        saveItem,\r\n        loading,\r\n        error\r\n    };\r\n\r\n}\r\nexport { useLocalStorage };","import React, { useContext } from 'react';\r\nimport { TodoContext } from '../TodoContext';\r\nimport './TodoCounter.css';\r\n\r\nexport const TodoCounter = () => {\r\n    const { totalTodos, completedtTodos } = useContext(TodoContext)\r\n\r\n    return (\r\n        <h2>\r\n            Has completado {completedtTodos} de  {totalTodos} TODOs\r\n        </h2>\r\n    )\r\n};\r\n","import React, { useContext } from 'react';\r\nimport { TodoContext } from '../TodoContext';\r\nimport './TodoSearch.css';\r\n\r\nexport const TodoSearch = () => {\r\n\r\n    const { searchValue, setSearchValue } = useContext(TodoContext)\r\n\r\n    const onSearchValueChange = (event) => {\r\n        setSearchValue(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <input\r\n                placeholder=\"Busca tu actividad...\"\r\n                value={searchValue}\r\n                onChange={onSearchValueChange}\r\n            />\r\n        </React.Fragment>\r\n    )\r\n};\r\n","import React from 'react';\r\nimport './TodoList.css';\r\n\r\nexport const TodoList = ({ children }) => {\r\n    return (\r\n        <section>\r\n            <ul>\r\n                {children}\r\n            </ul>\r\n        </section>\r\n    )\r\n};\r\n","import React from 'react';\r\nimport './TodoItem.css';\r\n\r\nexport const TodoItem = ({ text, completed, onComplete, onDelete }) => {\r\n\r\n    return (\r\n        <li className=\"TodoItem\">\r\n            <span\r\n                className={`Icon Icon-check ${completed && 'Icon-check--active'}`}\r\n                onClick={onComplete}\r\n            >\r\n                √\r\n            </span>\r\n            <p className={`TodoItem-p ${completed && 'TodoItem-p--complete'}`}>\r\n                {text}\r\n            </p>\r\n            <span\r\n                className=\"Icon Icon-delete\"\r\n                onClick={onDelete}\r\n            >\r\n                X\r\n            </span>\r\n        </li>\r\n    )\r\n};\r\n","import React from 'react';\r\nimport './CreateTodoButton.css';\r\n\r\nexport const CreateTodoButton = ({ setOpenModal }) => {\r\n    const onClickButton = () => {\r\n        setOpenModal(prevState => !prevState);\r\n    }\r\n    return (\r\n        <button\r\n            className=\"CreateTodoButton\"\r\n            onClick={onClickButton}\r\n        >\r\n            +\r\n        </button>\r\n    )\r\n};\r\n","import ReactDOM from 'react-dom';\r\nimport './Modal.css';\r\n\r\nfunction Modal({ children }) {\r\n    return ReactDOM.createPortal(\r\n        <div className=\"ModalBackground\">\r\n            {children}\r\n        </div>,\r\n        document.getElementById('modal')\r\n    );\r\n}\r\n\r\nexport { Modal };","import React, { useContext, useState } from 'react'\r\nimport { TodoContext } from '../TodoContext'\r\nimport './TodoForm.css';\r\n\r\nexport const TodoForm = () => {\r\n\r\n    const [newTodoValue, setNewTodoValue] = useState('');\r\n\r\n    const { addTodo, setOpenModal } = useContext(TodoContext)\r\n\r\n    const onChange = (event) => {\r\n        setNewTodoValue(event.target.value);\r\n    }\r\n    const onCancel = () => {\r\n        setOpenModal(false);\r\n    }\r\n    const onSubmit = (event) => {\r\n        event.preventDefault();\r\n        addTodo(newTodoValue);\r\n        setOpenModal(false);\r\n    }\r\n    return (\r\n        <form onSubmit={onSubmit}>\r\n            <label>Escribe tu nuevo TODO</label>\r\n            <textarea\r\n                value={newTodoValue}\r\n                onChange={onChange}\r\n                placeholder=\"Acctividad a realizar\"\r\n            />\r\n            <div className=\"TodoForm-buttonContainer\">\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"TodoForm-button TodoForm-button-cancel\"\r\n                    onClick={onCancel}\r\n                >\r\n                    Cancelar\r\n                </button>\r\n                <button\r\n                    className=\"TodoForm-button TodoForm-button-add\"\r\n                    type=\"submit\"\r\n                >\r\n                    Añadir\r\n                </button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n","import React, { useContext } from 'react';\r\nimport { TodoCounter } from '../TodoCounter';\r\nimport { TodoSearch } from '../TodoSearch';\r\nimport { TodoList } from '../TodoList';\r\nimport { TodoItem } from '../TodoItem';\r\nimport { CreateTodoButton } from '../CreateTodoButton';\r\nimport { TodoContext } from '../TodoContext';\r\nimport { Modal } from '../Modal';\r\nimport { TodoForm } from '../TodoForm';\r\nimport './App.css';\r\n\r\n\r\nconst AppUI = () => {\r\n    const { error, loading, searchedTodos, completeTodo, deleteTodo, openModal, setOpenModal } = useContext(TodoContext);\r\n    return (\r\n        <div className=\"main__master\">\r\n            <TodoCounter />\r\n            <TodoSearch />\r\n\r\n            <TodoList>\r\n                {error && <p>ups hubo un error</p>}\r\n                {loading && <p>Estamos cargando...</p>}\r\n                {(!loading && !searchedTodos.length) && <p>Crea tu primer TODO...</p>}\r\n\r\n                {searchedTodos.map((todo, index) => (\r\n                    <TodoItem\r\n                        key={todo.text + index}\r\n                        text={todo.text}\r\n                        completed={todo.completed}\r\n                        onComplete={() => completeTodo(todo.text)}\r\n                        onDelete={() => deleteTodo(todo.text)}\r\n                    />\r\n                ))}\r\n            </TodoList>\r\n            {openModal && (\r\n                <Modal>\r\n                    <TodoForm />\r\n                </Modal>\r\n            )}\r\n            <CreateTodoButton\r\n                setOpenModal={setOpenModal}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { AppUI };\r\n","import React from 'react';\nimport { AppUI } from './AppUI';\nimport { TodoProvider } from '../TodoContext';\n// const defaultTodos = [\n//   { text: 'Cortar cebolla', completed: false },\n//   { text: 'tarea 2', completed: true },\n//   { text: 'tarea 3', completed: false },\n//   { text: 'tarea 4', completed: false },\n// ]\n\nconst App = () => {\n\n  return (\n    <TodoProvider>\n      <AppUI />\n    </TodoProvider>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}